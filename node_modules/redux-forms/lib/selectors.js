'use strict';

exports.__esModule = true;

var _any = require('ramda/src/any');

var _any2 = _interopRequireDefault(_any);

var _none = require('ramda/src/none');

var _none2 = _interopRequireDefault(_none);

var _values = require('ramda/src/values');

var _values2 = _interopRequireDefault(_values);

var _path = require('ramda/src/path');

var _path2 = _interopRequireDefault(_path);

var _prop = require('ramda/src/prop');

var _prop2 = _interopRequireDefault(_prop);

var _map = require('ramda/src/map');

var _map2 = _interopRequireDefault(_map);

var _compose = require('ramda/src/compose');

var _compose2 = _interopRequireDefault(_compose);

var _memoize = require('ramda/src/memoize');

var _memoize2 = _interopRequireDefault(_memoize);

exports.getValues = getValues;
exports.getErrors = getErrors;
exports.isValid = isValid;
exports.isTouched = isTouched;
exports.isDirty = isDirty;
exports.isSubmitting = isSubmitting;

var _helpers = require('./shared/helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EMPTY = {};
var memUnflatten = (0, _memoize2.default)(_helpers.unflatten);
var memValue = (0, _memoize2.default)((0, _compose2.default)(memUnflatten, (0, _map2.default)((0, _prop2.default)('value'))));
function getValues(name, state) {
    var form = (0, _path2.default)(['reduxForms', name], state);
    if (!form) {
        return EMPTY;
    }
    return memValue(form.fields);
}
var memError = (0, _memoize2.default)((0, _compose2.default)(memUnflatten, (0, _map2.default)((0, _prop2.default)('error'))));
function getErrors(name, state) {
    var form = (0, _path2.default)(['reduxForms', name], state);
    if (!form) {
        return EMPTY;
    }
    return memError(form.fields);
}
var memValues = (0, _memoize2.default)(_values2.default);
var memValid = (0, _memoize2.default)((0, _compose2.default)((0, _none2.default)(Boolean), memValues, (0, _map2.default)((0, _prop2.default)('error'))));
function isValid(name, state) {
    var form = (0, _path2.default)(['reduxForms', name], state);
    if (!form) {
        return false;
    }
    return memValid(form.fields);
}
var memTouched = (0, _memoize2.default)((0, _compose2.default)((0, _any2.default)(Boolean), memValues, (0, _map2.default)((0, _prop2.default)('touched'))));
function isTouched(name, state) {
    var form = (0, _path2.default)(['reduxForms', name], state);
    if (!form) {
        return false;
    }
    return memTouched(form.fields);
}
var memDirty = (0, _memoize2.default)((0, _compose2.default)((0, _any2.default)(Boolean), memValues, (0, _map2.default)((0, _prop2.default)('dirty'))));
function isDirty(name, state) {
    var form = (0, _path2.default)(['reduxForms', name], state);
    if (!form) {
        return false;
    }
    return memDirty(form.fields);
}
function isSubmitting(name, state) {
    var form = (0, _path2.default)(['reduxForms', name], state);
    if (!form) {
        return false;
    }
    return form.submitting;
}