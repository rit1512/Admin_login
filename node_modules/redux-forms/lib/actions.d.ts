import { Field } from './containers';
export declare const ADD_FORM = "@@redux-forms/ADD_FORM";
export declare const REMOVE_FORM = "@@redux-forms/REMOVE_FORM";
export declare const ADD_FIELD = "@@redux-forms/ADD_FIELD";
export declare const REMOVE_FIELD = "@@redux-forms/REMOVE_FIELD";
export declare const TOUCH_ALL = "@@redux-forms/TOUCH_ALL";
export declare const SUBMIT_START = "@@redux-forms/SUBMIT_START";
export declare const SUBMIT_STOP = "@@redux-forms/SUBMIT_STOP";
export declare const ADD_ARRAY = "@@redux-forms/ADD_ARRAY";
export declare const REMOVE_ARRAY = "@@redux-forms/REMOVE_ARRAY";
export declare const ARRAY_PUSH = "@@redux-forms/ARRAY_PUSH";
export declare const ARRAY_POP = "@@redux-forms/ARRAY_POP";
export declare const ARRAY_UNSHIFT = "@@redux-forms/ARRAY_UNSHIFT";
export declare const ARRAY_SHIFT = "@@redux-forms/ARRAY_SHIFT";
export declare const ARRAY_INSERT = "@@redux-forms/ARRAY_INSERT";
export declare const ARRAY_REMOVE = "@@redux-forms/ARRAY_REMOVE";
export declare const ARRAY_SWAP = "@@redux-forms/ARRAY_SWAP";
export declare const ARRAY_MOVE = "@@redux-forms/ARRAY_MOVE";
export declare const FIELD_CHANGE = "@@redux-forms/FIELD_CHANGE";
export declare const FIELD_FOCUS = "@@redux-forms/FIELD_FOCUS";
export declare const FIELD_BLUR = "@@redux-forms/FIELD_BLUR";
export declare const FIELD_VALUE = "@@redux-forms/FIELD_VALUE";
export declare const FIELD_ERROR = "@@redux-forms/FIELD_ERROR";
export declare const FIELD_DIRTY = "@@redux-forms/FIELD_DIRTY";
export declare type AddFormAction = {
    type: '@@redux-forms/ADD_FORM';
    payload: {
        name: string;
    };
};
export declare const addForm: (name: string) => AddFormAction;
export declare type RemoveFormAction = {
    type: '@@redux-forms/REMOVE_FORM';
    payload: {
        name: string;
    };
};
export declare const removeForm: (name: string) => RemoveFormAction;
export declare type AddFieldAction = {
    type: '@@redux-forms/ADD_FIELD';
    payload: {
        form: string;
        id: string;
        field: Field;
    };
};
export declare const addField: (form: string, id: string, field: Field) => AddFieldAction;
export declare type RemoveFieldAction = {
    type: '@@redux-forms/REMOVE_FIELD';
    payload: {
        form: string;
        id: string;
    };
};
export declare const removeField: (form: string, id: string) => RemoveFieldAction;
export declare type TouchAllAction = {
    type: '@@redux-forms/TOUCH_ALL';
    payload: {
        form: string;
    };
};
export declare const touchAll: (form: string) => TouchAllAction;
export declare type SubmitStartAction = {
    type: '@@redux-forms/SUBMIT_START';
    payload: {
        form: string;
    };
};
export declare const submitStart: (form: string) => SubmitStartAction;
export declare type SubmitStopAction = {
    type: '@@redux-forms/SUBMIT_STOP';
    payload: {
        form: string;
    };
};
export declare const submitStop: (form: string) => SubmitStopAction;
export declare type AddArrayAction = {
    type: '@@redux-forms/ADD_ARRAY';
    payload: {
        form: string;
        id: string;
    };
};
export declare const addArray: (form: string, id: string) => AddArrayAction;
export declare type RemoveArrayAction = {
    type: '@@redux-forms/REMOVE_ARRAY';
    payload: {
        form: string;
        id: string;
    };
};
export declare const removeArray: (form: string, id: string) => RemoveArrayAction;
export declare type ArrayPushAction = {
    type: '@@redux-forms/ARRAY_PUSH';
    payload: {
        form: string;
        id: string;
    };
};
export declare const arrayPush: (form: string, id: string) => ArrayPushAction;
export declare type ArrayPopAction = {
    type: '@@redux-forms/ARRAY_POP';
    payload: {
        form: string;
        id: string;
    };
};
export declare const arrayPop: (form: string, id: string) => ArrayPopAction;
export declare type ArrayUnshiftAction = {
    type: '@@redux-forms/ARRAY_UNSHIFT';
    payload: {
        form: string;
        id: string;
    };
};
export declare const arrayUnshift: (form: string, id: string) => ArrayUnshiftAction;
export declare type ArrayShiftAction = {
    type: '@@redux-forms/ARRAY_SHIFT';
    payload: {
        form: string;
        id: string;
    };
};
export declare const arrayShift: (form: string, id: string) => ArrayShiftAction;
export declare type ArrayInsertAction = {
    type: '@@redux-forms/ARRAY_INSERT';
    payload: {
        form: string;
        id: string;
        index: number;
    };
};
export declare const arrayInsert: (form: string, id: string, index: number) => ArrayInsertAction;
export declare type ArrayRemoveAction = {
    type: '@@redux-forms/ARRAY_REMOVE';
    payload: {
        form: string;
        id: string;
        index: number;
    };
};
export declare const arrayRemove: (form: string, id: string, index: number) => ArrayRemoveAction;
export declare type ArraySwapAction = {
    type: '@@redux-forms/ARRAY_SWAP';
    payload: {
        form: string;
        id: string;
        index1: number;
        index2: number;
    };
};
export declare const arraySwap: (form: string, id: string, index1: number, index2: number) => ArraySwapAction;
export declare type ArrayMoveAction = {
    type: '@@redux-forms/ARRAY_MOVE';
    payload: {
        form: string;
        id: string;
        from: number;
        to: number;
    };
};
export declare const arrayMove: (form: string, id: string, from: number, to: number) => ArrayMoveAction;
export declare type FieldChangeAction = {
    type: '@@redux-forms/FIELD_CHANGE';
    payload: {
        form: string;
        field: string;
        value: any;
        error: string | null;
        dirty: boolean;
    };
};
export declare const fieldChange: (form: string, field: string, value: any, error: string | null, dirty: boolean) => FieldChangeAction;
export declare type FieldFocusAction = {
    type: '@@redux-forms/FIELD_FOCUS';
    payload: {
        form: string;
        field: string;
    };
};
export declare const fieldFocus: (form: string, field: string) => FieldFocusAction;
export declare type FieldBlurAction = {
    type: '@@redux-forms/FIELD_BLUR';
    payload: {
        form: string;
        field: string;
        value: any;
        error: string | null;
        dirty: boolean;
    };
};
export declare const fieldBlur: (form: string, field: string, value: any, error: string | null, dirty: boolean) => FieldBlurAction;
export declare type FieldValueAction = {
    type: '@@redux-forms/FIELD_VALUE';
    payload: {
        form: string;
        field: string;
        value: any;
    };
};
export declare const fieldValue: (form: string, field: string, value: any) => FieldValueAction;
export declare type FieldErrorAction = {
    type: '@@redux-forms/FIELD_ERROR';
    payload: {
        form: string;
        field: string;
        error: string | null;
    };
};
export declare const fieldError: (form: string, field: string, error: string | null) => FieldErrorAction;
export declare type FieldDirtyAction = {
    type: '@@redux-forms/FIELD_DIRTY';
    payload: {
        form: string;
        field: string;
        dirty: boolean;
    };
};
export declare const fieldDirty: (form: string, field: string, dirty: boolean) => FieldDirtyAction;
export declare type Action = AddFormAction | RemoveFormAction | AddFieldAction | RemoveFieldAction | TouchAllAction | SubmitStartAction | SubmitStopAction | AddArrayAction | RemoveArrayAction | ArrayPushAction | ArrayPopAction | ArrayUnshiftAction | ArrayShiftAction | ArrayInsertAction | ArrayRemoveAction | ArraySwapAction | ArrayMoveAction | FieldChangeAction | FieldFocusAction | FieldBlurAction | FieldValueAction | FieldErrorAction | FieldDirtyAction;
