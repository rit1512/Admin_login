'use strict';

var _identity = require('ramda/src/identity');

var _identity2 = _interopRequireDefault(_identity);

var _fieldProps = require('../fieldProps');

var _fieldProps2 = _interopRequireDefault(_fieldProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// <reference types="jest" />
var onChange = _identity2.default;
var onFocus = _identity2.default;
var onBlur = _identity2.default;
var props = {
    // input
    // ---
    value: '1337',
    checked: false,
    name: 'fieldz',
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    // meta
    // ---
    error: 'not enough peanuts',
    dirty: false,
    visited: false,
    touched: true,
    active: false,
    // field
    // ---
    _field: {},
    // custom
    // ---
    kek: 'bur'
};
var props2 = Object.assign({}, props, { value: true });
describe('#fieldProps', function () {
    it('should separate input props', function () {
        var result = (0, _fieldProps2.default)(props);
        expect(result.input.value).toBe('1337');
        expect(result.input.checked).toBe(false);
        expect(result.input.name).toBe('fieldz');
        expect(result.input.onChange).toBeDefined();
        expect(result.input.onFocus).toBeDefined();
        expect(result.input.onBlur).toBeDefined();
    });
    it('should separate meta props', function () {
        var result = (0, _fieldProps2.default)(props);
        expect(result.meta.error).toBe('not enough peanuts');
        expect(result.meta.dirty).toBe(false);
        expect(result.meta.visited).toBe(false);
        expect(result.meta.touched).toBe(true);
        expect(result.meta.active).toBe(false);
    });
    it('should add a "checked" prop for boolean value', function () {
        var result = (0, _fieldProps2.default)(props2);
        expect(result.input.checked).toBe(true);
    });
    it('should turn "_field" prop to a boolean', function () {
        expect((0, _fieldProps.boolField)(props)).toEqual(Object.assign({}, props, { _field: true }));
    });
    it('should keep custom props', function () {
        var result = (0, _fieldProps2.default)(props);
        expect(result.rest.kek).toBe('bur');
    });
});