'use strict';

var _identity = require('ramda/src/identity');

var _identity2 = _interopRequireDefault(_identity);

var _helpers = require('../helpers');

var helpers = _interopRequireWildcard(_helpers);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var event = {
    preventDefault: _identity2.default,
    stopPropagation: _identity2.default
};
var fields = {
    'name': 'John',
    'nicknames.0': 'johnny',
    'nicknames.1': 'leet',
    'pets.0.foods.0.calories': 133,
    'pets.0.foods.1.calories': 337
};
describe('#helpers', function () {
    it('should recognize a string', function () {
        expect(helpers.isString('')).toBe(true);
        expect(helpers.isString('adsf')).toBe(true);
        expect(helpers.isString('1234')).toBe(true);
    });
    it('should not recognize a string', function () {
        expect(helpers.isString(undefined)).toBe(false);
        expect(helpers.isString(null)).toBe(false);
        expect(helpers.isString(1234)).toBe(false);
        expect(helpers.isString({})).toBe(false);
        expect(helpers.isString([])).toBe(false);
    });
    it('should recognize a number', function () {
        expect(helpers.isNumber(1234)).toBe(true);
        expect(helpers.isNumber(13.37)).toBe(true);
    });
    it('should not recognize a number', function () {
        expect(helpers.isNumber(undefined)).toBe(false);
        expect(helpers.isNumber(null)).toBe(false);
        expect(helpers.isNumber('1234')).toBe(false);
        expect(helpers.isNumber({})).toBe(false);
        expect(helpers.isNumber([])).toBe(false);
    });
    it('should recognize a promise', function () {
        expect(helpers.isPromise(new Promise(function (resolve) {
            return resolve();
        }))).toBe(true);
        expect(helpers.isPromise({ then: function then() {
                return null;
            } })).toBe(true);
    });
    it('should not recognize a promise', function () {
        expect(helpers.isPromise(undefined)).toBe(false);
        expect(helpers.isPromise(null)).toBe(false);
        expect(helpers.isPromise(1234)).toBe(false);
        expect(helpers.isPromise('asdf')).toBe(false);
        expect(helpers.isPromise({})).toBe(false);
        expect(helpers.isPromise([])).toBe(false);
    });
    it('should recognize a function', function () {
        expect(helpers.isFunction(_identity2.default)).toBe(true);
        expect(helpers.isFunction(function () {
            return null;
        })).toBe(true);
    });
    it('should not recognize a function', function () {
        expect(helpers.isFunction(undefined)).toBe(false);
        expect(helpers.isFunction(null)).toBe(false);
        expect(helpers.isFunction(1234)).toBe(false);
        expect(helpers.isFunction('asdf')).toBe(false);
        expect(helpers.isFunction({})).toBe(false);
        expect(helpers.isFunction([])).toBe(false);
    });
    it('should recognize an event', function () {
        expect(helpers.isEvent(event)).toBe(true);
    });
    it('should not recognize an event', function () {
        expect(helpers.isEvent(undefined)).toBe(false);
        expect(helpers.isEvent(null)).toBe(false);
        expect(helpers.isEvent(1234)).toBe(false);
        expect(helpers.isEvent('asdf')).toBe(false);
        expect(helpers.isEvent({})).toBe(false);
        expect(helpers.isEvent([])).toBe(false);
    });
    it('should compare objects', function () {
        var props1 = { lol: 'rofl', kek: 1337 };
        var props2 = { lol: 'rofl', kek: 1337 };
        expect(helpers.shallowCompare(props1, props1)).toBe(true);
        expect(helpers.shallowCompare(props1, props2)).toBe(true);
    });
    it('should not compare objects', function () {
        var propsKeys1 = { lol: 'rofl', kek: 1337 };
        var propsKeys2 = { lol: 'rofl' };
        var propsValues1 = { kek: 1337, lol: 'rofl' };
        var propsValues2 = { kek: 1336, lol: 'rofl' };
        var propsId1 = { lol: 'rofl', kek: [] };
        var propsId2 = { lol: 'rofl', kek: [] };
        expect(helpers.shallowCompare(propsKeys1, propsKeys2)).toBe(false);
        expect(helpers.shallowCompare(propsValues1, propsValues2)).toBe(false);
        expect(helpers.shallowCompare(propsId1, propsId2)).toBe(false);
    });
    it('should unflatten an object', function () {
        expect(helpers.unflatten(fields)).toEqual({
            name: 'John',
            nicknames: ['johnny', 'leet'],
            pets: [{
                foods: [{
                    calories: 133
                }, {
                    calories: 337
                }]
            }]
        });
    });
    it('should not throw if ok', function () {
        expect(function () {
            return helpers.invariant(true, 'asdf');
        }).not.toThrow();
    });
    it('should throw if not ok', function () {
        expect(function () {
            return helpers.invariant(false, 'asdf');
        }).toThrowError(/asdf/);
    });
});