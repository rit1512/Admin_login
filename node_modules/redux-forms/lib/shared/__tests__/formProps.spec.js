'use strict';

var _identity = require('ramda/src/identity');

var _identity2 = _interopRequireDefault(_identity);

var _formProps = require('../formProps');

var _formProps2 = _interopRequireDefault(_formProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var props = {
    // to omit
    // ---
    name: 'form',
    persistent: true,
    withRef: _identity2.default,
    // state
    _form: {},
    _values: {},
    _valid: false,
    _submitting: false,
    // actions
    _addForm: _identity2.default,
    _removeForm: _identity2.default,
    _touchAll: _identity2.default,
    _submitStart: _identity2.default,
    _submitStop: _identity2.default,
    // custom
    // ---
    damage: 'tons of',
    wow: 'so test'
};
var props2 = Object.assign({}, props, { value: true });
describe('#fieldProps', function () {
    it('should omit props', function () {
        var result = (0, _formProps2.default)(props);
        expect(result.name).toBeUndefined();
        expect(result.persistent).toBeUndefined();
        expect(result.withRef).toBeUndefined();
        expect(result._form).toBeUndefined();
        expect(result._values).toBeUndefined();
        expect(result._valid).toBeUndefined();
        expect(result._submitting).toBeUndefined();
        expect(result._addForm).toBeUndefined();
        expect(result._removeForm).toBeUndefined();
        expect(result._touchAll).toBeUndefined();
        expect(result._submitStart).toBeUndefined();
        expect(result._submitStop).toBeUndefined();
    });
    it('should keep custom props', function () {
        var result = (0, _formProps2.default)(props);
        expect(result.damage).toBe('tons of');
        expect(result.wow).toBe('so test');
    });
    it('should omit props not to update for', function () {
        var result = (0, _formProps.toUpdate)(props);
        expect(result._values).toBeUndefined();
        expect(result._valid).toBeUndefined();
        expect(result._submitting).toBeUndefined();
        expect(result.name).toBeDefined();
        expect(result.persistent).toBeDefined();
        expect(result.withRef).toBeDefined();
        expect(result._form).toBeDefined();
        expect(result._addForm).toBeDefined();
        expect(result._removeForm).toBeDefined();
        expect(result._touchAll).toBeDefined();
        expect(result._submitStart).toBeDefined();
        expect(result._submitStop).toBeDefined();
    });
});