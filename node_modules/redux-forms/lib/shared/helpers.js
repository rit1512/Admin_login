'use strict';

exports.__esModule = true;

var _prop = require('ramda/src/prop');

var _prop2 = _interopRequireDefault(_prop);

var _reduce = require('ramda/src/reduce');

var _reduce2 = _interopRequireDefault(_reduce);

var _keys = require('ramda/src/keys');

var _keys2 = _interopRequireDefault(_keys);

var _length = require('ramda/src/length');

var _length2 = _interopRequireDefault(_length);

var _compose = require('ramda/src/compose');

var _compose2 = _interopRequireDefault(_compose);

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.isString = isString;
exports.isNumber = isNumber;
exports.isPromise = isPromise;
exports.isFunction = isFunction;
exports.isEvent = isEvent;
exports.shallowCompare = shallowCompare;
exports.unflatten = unflatten;
exports.invariant = invariant;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isString(cand) {
    return typeof cand === 'string';
}
function isNumber(cand) {
    return typeof cand === 'number';
}
function isPromise(cand) {
    return Boolean(cand) && (typeof cand === 'undefined' ? 'undefined' : _typeof(cand)) === 'object' && typeof cand.then === 'function';
}
function isFunction(cand) {
    return typeof cand === 'function';
}
function isEvent(cand) {
    return Boolean(cand && (typeof cand === 'undefined' ? 'undefined' : _typeof(cand)) === 'object' && isFunction(cand.preventDefault) && isFunction(cand.stopPropagation));
}
var keyCount = (0, _compose2.default)(_length2.default, _keys2.default);
function shallowCompare(props1, props2) {
    if (props1 === props2) {
        return true;
    }
    if (keyCount(props1) !== keyCount(props2)) {
        return false;
    }
    return (0, _reduce2.default)(function (acc, key) {
        return acc && (0, _prop2.default)(key, props1) === (0, _prop2.default)(key, props2);
    }, true, (0, _keys2.default)(props1));
}
// FIXME: ugly code
// A rewrite would be welcome.
function unflatten(obj) {
    var result = {};
    Object.keys(obj).forEach(function (propp) {
        return propp.split('.').reduce(function (acc, key, index, array) {
            var k = isNaN(Number(key)) ? key : Number(key);
            if (index === array.length - 1) {
                return acc[k] = obj[propp];
            }
            if (acc[k]) {
                return acc[k] = acc[k];
            }
            if (!isNaN(Number(array[index + 1]))) {
                return acc[k] = [];
            }
            return acc[k] = {};
        }, result);
    });
    return result;
}
function invariant(cond, msg) {
    if (cond) {
        return;
    }
    var error = new Error(msg);
    error.name = 'Invariant violation';
    throw error;
}