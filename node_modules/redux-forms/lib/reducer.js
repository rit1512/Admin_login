'use strict';

exports.__esModule = true;

var _always = require('ramda/src/always');

var _always2 = _interopRequireDefault(_always);

var _lt = require('ramda/src/lt');

var _lt2 = _interopRequireDefault(_lt);

var _pathSatisfies = require('ramda/src/pathSatisfies');

var _pathSatisfies2 = _interopRequireDefault(_pathSatisfies);

var _lensProp = require('ramda/src/lensProp');

var _lensProp2 = _interopRequireDefault(_lensProp);

var _set = require('ramda/src/set');

var _set2 = _interopRequireDefault(_set);

var _map = require('ramda/src/map');

var _map2 = _interopRequireDefault(_map);

var _lensPath = require('ramda/src/lensPath');

var _lensPath2 = _interopRequireDefault(_lensPath);

var _over = require('ramda/src/over');

var _over2 = _interopRequireDefault(_over);

var _dissocPath = require('ramda/src/dissocPath');

var _dissocPath2 = _interopRequireDefault(_dissocPath);

var _has = require('ramda/src/has');

var _has2 = _interopRequireDefault(_has);

var _identity = require('ramda/src/identity');

var _identity2 = _interopRequireDefault(_identity);

var _ifElse = require('ramda/src/ifElse');

var _ifElse2 = _interopRequireDefault(_ifElse);

var _dissoc = require('ramda/src/dissoc');

var _dissoc2 = _interopRequireDefault(_dissoc);

var _assocPath = require('ramda/src/assocPath');

var _assocPath2 = _interopRequireDefault(_assocPath);

var _dec = require('ramda/src/dec');

var _dec2 = _interopRequireDefault(_dec);

var _defaultTo = require('ramda/src/defaultTo');

var _defaultTo2 = _interopRequireDefault(_defaultTo);

var _inc = require('ramda/src/inc');

var _inc2 = _interopRequireDefault(_inc);

var _compose = require('ramda/src/compose');

var _compose2 = _interopRequireDefault(_compose);

exports.default = formsReducer;

var _containers = require('./containers');

var _arrays = require('./arrays');

var _helpers = require('./shared/helpers');

var _actions = require('./actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RarrayInc = (0, _compose2.default)(_inc2.default, (0, _defaultTo2.default)(0));
var RarrayDec = (0, _compose2.default)(_dec2.default, (0, _defaultTo2.default)(0));
function formsReducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var a = arguments[1];

    switch (a.type) {
        // Form
        // ---
        case _actions.ADD_FORM:
            return (0, _assocPath2.default)([a.payload.name], _containers.form, state);
        case _actions.REMOVE_FORM:
            return (0, _dissoc2.default)(a.payload.name, state);
        case _actions.ADD_FIELD:
            return (0, _ifElse2.default)((0, _has2.default)(a.payload.form), (0, _assocPath2.default)([a.payload.form, 'fields', a.payload.id], a.payload.field), _identity2.default)(state);
        case _actions.REMOVE_FIELD:
            return (0, _dissocPath2.default)([a.payload.form, 'fields', a.payload.id], state);
        case _actions.TOUCH_ALL:
            return (0, _ifElse2.default)((0, _has2.default)(a.payload.form), (0, _over2.default)((0, _lensPath2.default)([a.payload.form, 'fields']), (0, _map2.default)((0, _set2.default)((0, _lensProp2.default)('touched'), true))), _identity2.default)(state);
        case _actions.SUBMIT_START:
            return (0, _ifElse2.default)((0, _has2.default)(a.payload.form), (0, _assocPath2.default)([a.payload.form, 'submitting'], true), _identity2.default)(state);
        case _actions.SUBMIT_STOP:
            return (0, _ifElse2.default)((0, _has2.default)(a.payload.form), (0, _assocPath2.default)([a.payload.form, 'submitting'], false), _identity2.default)(state);
        // Array
        // ---
        case _actions.ADD_ARRAY:
            return (0, _ifElse2.default)((0, _has2.default)(a.payload.form), (0, _assocPath2.default)([a.payload.form, 'arrays', a.payload.id], 0), _identity2.default)(state);
        case _actions.REMOVE_ARRAY:
            return (0, _compose2.default)((0, _over2.default)((0, _lensPath2.default)([a.payload.form, 'arrays']), (0, _arrays.arrayCleanup)(a.payload.id)), (0, _over2.default)((0, _lensPath2.default)([a.payload.form, 'fields']), (0, _arrays.arrayCleanup)(a.payload.id)))(state);
        case _actions.ARRAY_PUSH:
            return (0, _ifElse2.default)((0, _pathSatisfies2.default)(_helpers.isNumber, [a.payload.form, 'arrays', a.payload.id]), (0, _over2.default)((0, _lensPath2.default)([a.payload.form, 'arrays', a.payload.id]), RarrayInc), _identity2.default)(state);
        case _actions.ARRAY_POP:
            return (0, _ifElse2.default)((0, _pathSatisfies2.default)(_helpers.isNumber, [a.payload.form, 'arrays', a.payload.id]), (0, _over2.default)((0, _lensPath2.default)([a.payload.form, 'arrays', a.payload.id]), (0, _ifElse2.default)((0, _lt2.default)(0), RarrayDec, (0, _always2.default)(0))), _identity2.default)(state);
        case _actions.ARRAY_UNSHIFT:
            return (0, _ifElse2.default)((0, _pathSatisfies2.default)(_helpers.isNumber, [a.payload.form, 'arrays', a.payload.id]), (0, _compose2.default)((0, _over2.default)((0, _lensPath2.default)([a.payload.form, 'fields']), (0, _arrays.arrayUnshift)(a.payload.id, 0)), (0, _over2.default)((0, _lensPath2.default)([a.payload.form, 'arrays', a.payload.id]), RarrayInc)), _identity2.default)(state);
        case _actions.ARRAY_SHIFT:
            return (0, _ifElse2.default)((0, _pathSatisfies2.default)(_helpers.isNumber, [a.payload.form, 'arrays', a.payload.id]), (0, _compose2.default)((0, _over2.default)((0, _lensPath2.default)([a.payload.form, 'fields']), (0, _arrays.arrayShift)(a.payload.id, 0)), (0, _over2.default)((0, _lensPath2.default)([a.payload.form, 'arrays', a.payload.id]), (0, _ifElse2.default)((0, _lt2.default)(0), RarrayDec, (0, _always2.default)(0)))), _identity2.default)(state);
        case _actions.ARRAY_INSERT:
            return (0, _ifElse2.default)((0, _pathSatisfies2.default)(_helpers.isNumber, [a.payload.form, 'arrays', a.payload.id]), (0, _compose2.default)((0, _over2.default)((0, _lensPath2.default)([a.payload.form, 'fields']), (0, _arrays.arrayUnshift)(a.payload.id, a.payload.index + 1)), (0, _over2.default)((0, _lensPath2.default)([a.payload.form, 'arrays', a.payload.id]), RarrayInc)), _identity2.default)(state);
        case _actions.ARRAY_REMOVE:
            return (0, _ifElse2.default)((0, _pathSatisfies2.default)(_helpers.isNumber, [a.payload.form, 'arrays', a.payload.id]), (0, _compose2.default)((0, _over2.default)((0, _lensPath2.default)([a.payload.form, 'fields']), (0, _arrays.arrayShift)(a.payload.id, a.payload.index)), (0, _over2.default)((0, _lensPath2.default)([a.payload.form, 'arrays', a.payload.id]), (0, _ifElse2.default)((0, _lt2.default)(0), RarrayDec, (0, _always2.default)(0)))), _identity2.default)(state);
        case _actions.ARRAY_SWAP:
            return (0, _ifElse2.default)((0, _pathSatisfies2.default)(_helpers.isNumber, [a.payload.form, 'arrays', a.payload.id]), (0, _over2.default)((0, _lensPath2.default)([a.payload.form, 'fields']), (0, _arrays.arraySwap)(a.payload.id, a.payload.index1, a.payload.index2)), _identity2.default)(state);
        case _actions.ARRAY_MOVE:
            return (0, _ifElse2.default)((0, _pathSatisfies2.default)(_helpers.isNumber, [a.payload.form, 'arrays', a.payload.id]), (0, _over2.default)((0, _lensPath2.default)([a.payload.form, 'fields']), (0, _arrays.arrayMove)(a.payload.id, a.payload.from, a.payload.to)), _identity2.default)(state);
        // Field
        // ---
        case _actions.FIELD_CHANGE:
            return (0, _ifElse2.default)((0, _pathSatisfies2.default)(Boolean, [a.payload.form, 'fields', a.payload.field]), (0, _compose2.default)((0, _assocPath2.default)([a.payload.form, 'fields', a.payload.field, 'value'], a.payload.value), (0, _assocPath2.default)([a.payload.form, 'fields', a.payload.field, 'error'], a.payload.error), (0, _assocPath2.default)([a.payload.form, 'fields', a.payload.field, 'dirty'], a.payload.dirty)), _identity2.default)(state);
        case _actions.FIELD_FOCUS:
            return (0, _ifElse2.default)((0, _pathSatisfies2.default)(Boolean, [a.payload.form, 'fields', a.payload.field]), (0, _compose2.default)((0, _assocPath2.default)([a.payload.form, 'fields', a.payload.field, 'active'], true), (0, _assocPath2.default)([a.payload.form, 'fields', a.payload.field, 'visited'], true)), _identity2.default)(state);
        case _actions.FIELD_BLUR:
            return (0, _ifElse2.default)((0, _pathSatisfies2.default)(Boolean, [a.payload.form, 'fields', a.payload.field]), (0, _compose2.default)((0, _assocPath2.default)([a.payload.form, 'fields', a.payload.field, 'value'], a.payload.value), (0, _assocPath2.default)([a.payload.form, 'fields', a.payload.field, 'error'], a.payload.error), (0, _assocPath2.default)([a.payload.form, 'fields', a.payload.field, 'dirty'], a.payload.dirty), (0, _assocPath2.default)([a.payload.form, 'fields', a.payload.field, 'active'], false), (0, _assocPath2.default)([a.payload.form, 'fields', a.payload.field, 'touched'], true)), _identity2.default)(state);
        case _actions.FIELD_VALUE:
            return (0, _ifElse2.default)((0, _pathSatisfies2.default)(Boolean, [a.payload.form, 'fields', a.payload.field]), (0, _assocPath2.default)([a.payload.form, 'fields', a.payload.field, 'value'], a.payload.value), _identity2.default)(state);
        case _actions.FIELD_ERROR:
            return (0, _ifElse2.default)((0, _pathSatisfies2.default)(Boolean, [a.payload.form, 'fields', a.payload.field]), (0, _assocPath2.default)([a.payload.form, 'fields', a.payload.field, 'error'], a.payload.error), _identity2.default)(state);
        case _actions.FIELD_DIRTY:
            return (0, _ifElse2.default)((0, _pathSatisfies2.default)(Boolean, [a.payload.form, 'fields', a.payload.field]), (0, _assocPath2.default)([a.payload.form, 'fields', a.payload.field, 'dirty'], a.payload.dirty), _identity2.default)(state);
        default:
            return state;
    }
}