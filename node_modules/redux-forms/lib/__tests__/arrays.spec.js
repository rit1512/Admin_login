'use strict';

var _arrays = require('../arrays');

var _containers = require('../containers');

var field0 = Object.assign({}, _containers.field, { value: '0' });
var field1 = Object.assign({}, _containers.field, { value: '1' });
var field2 = Object.assign({}, _containers.field, { value: '2' });
var field3 = Object.assign({}, _containers.field, { value: '3' });
var field4 = Object.assign({}, _containers.field, { value: '4' });
var fields = {
    'flat.0': field0,
    'flat.1': field1,
    'flat.2': field2,
    'flat.3': field3,
    'flat.4': field4,
    'medium.0.nest.0': field0,
    'medium.0.nest.1': field1,
    'medium.0.nest.2': field2,
    'medium.0.nest.3': field3,
    'medium.1.nest.0': field3,
    'medium.1.nest.1': field2,
    'medium.1.nest.2': field1,
    'medium.1.nest.3': field0,
    'rec.0.rec.0.rec.0': field0,
    'rec.0.rec.0.rec.1': field1,
    'rec.0.rec.0.rec.2': field2
};
describe('#arrays', function () {
    it('should not shift to negative index', function () {
        var res = (0, _arrays.arrayShift)('flat', 0)(fields);
        expect(res['flat.-1']).toBeUndefined();
        expect(res['flat.0']).toBe(field1);
        expect(res['flat.1']).toBe(field2);
        expect(res['flat.2']).toBe(field3);
        expect(res['flat.3']).toBe(field4);
    });
    it('should shift flat array', function () {
        var res = (0, _arrays.arrayUnshift)('flat', 1)(fields);
        expect(res['flat.1']).toBeUndefined();
        expect(res['flat.0']).toBe(field0);
        expect(res['flat.2']).toBe(field1);
        expect(res['flat.3']).toBe(field2);
        expect(res['flat.4']).toBe(field3);
        expect(res['flat.5']).toBe(field4);
    });
    it('should shift flat array - negative', function () {
        var res = (0, _arrays.arrayShift)('flat', 1)(fields);
        expect(res['flat.4']).toBeUndefined();
        expect(res['flat.0']).toBe(field0);
        expect(res['flat.1']).toBe(field2);
        expect(res['flat.2']).toBe(field3);
        expect(res['flat.3']).toBe(field4);
    });
    it('should shift nested array', function () {
        var res = (0, _arrays.arrayUnshift)('medium.0.nest', 2)(fields);
        expect(res['medium.0.nest.2']).toBeUndefined();
        expect(res['medium.0.nest.0']).toBe(field0);
        expect(res['medium.0.nest.1']).toBe(field1);
        expect(res['medium.0.nest.3']).toBe(field2);
        expect(res['medium.0.nest.4']).toBe(field3);
    });
    it('should shift nested array - negative', function () {
        var res = (0, _arrays.arrayShift)('medium.0.nest', 2)(fields);
        expect(res['medium.0.nest.3']).toBeUndefined();
        expect(res['medium.0.nest.0']).toBe(field0);
        expect(res['medium.0.nest.1']).toBe(field1);
        expect(res['medium.0.nest.2']).toBe(field3);
    });
    it('should shift recursive array - head', function () {
        var res = (0, _arrays.arrayUnshift)('rec', 0)(fields);
        expect(res['rec.0.rec.0.rec.0']).toBeUndefined();
        expect(res['rec.0.rec.0.rec.1']).toBeUndefined();
        expect(res['rec.0.rec.0.rec.2']).toBeUndefined();
        expect(res['rec.1.rec.0.rec.0']).toBe(field0);
        expect(res['rec.1.rec.0.rec.1']).toBe(field1);
        expect(res['rec.1.rec.0.rec.2']).toBe(field2);
    });
    it('should shift recursive array - mid', function () {
        var res = (0, _arrays.arrayUnshift)('rec.0.rec', 0)(fields);
        expect(res['rec.0.rec.0.rec.0']).toBeUndefined();
        expect(res['rec.0.rec.0.rec.1']).toBeUndefined();
        expect(res['rec.0.rec.0.rec.2']).toBeUndefined();
        expect(res['rec.0.rec.1.rec.0']).toBe(field0);
        expect(res['rec.0.rec.1.rec.1']).toBe(field1);
        expect(res['rec.0.rec.1.rec.2']).toBe(field2);
    });
    it('should shift recursive array - last', function () {
        var res = (0, _arrays.arrayUnshift)('rec.0.rec.0.rec', 1)(fields);
        expect(res['rec.0.rec.0.rec.1']).toBeUndefined();
        expect(res['rec.0.rec.0.rec.0']).toBe(field0);
        expect(res['rec.0.rec.0.rec.2']).toBe(field1);
        expect(res['rec.0.rec.0.rec.3']).toBe(field2);
    });
    it('should not swap nonexistent fields', function () {
        var res = (0, _arrays.arraySwap)('medium.0.nest', 1, 8)(fields);
        expect(res).toBe(fields);
    });
    it('should swap two fields', function () {
        var res = (0, _arrays.arraySwap)('medium.0.nest', 1, 3)(fields);
        expect(res).toEqual(Object.assign({}, fields, { 'medium.0.nest.1': field3, 'medium.0.nest.3': field1 }));
    });
    it('should swap nested fields', function () {
        var res = (0, _arrays.arraySwap)('medium', 0, 1)(fields);
        expect(res['medium.0.nest.0']).toBe(fields['medium.1.nest.0']);
        expect(res['medium.0.nest.1']).toBe(fields['medium.1.nest.1']);
        expect(res['medium.0.nest.2']).toBe(fields['medium.1.nest.2']);
        expect(res['medium.0.nest.3']).toBe(fields['medium.1.nest.3']);
        expect(res['medium.1.nest.0']).toBe(fields['medium.0.nest.0']);
        expect(res['medium.1.nest.1']).toBe(fields['medium.0.nest.1']);
        expect(res['medium.1.nest.2']).toBe(fields['medium.0.nest.2']);
        expect(res['medium.1.nest.3']).toBe(fields['medium.0.nest.3']);
    });
    it('should not move nonexistent fields', function () {
        var res = (0, _arrays.arrayMove)('medium.0.nest', 1, 8)(fields);
        expect(res).toBe(fields);
    });
    it('should move a field - start', function () {
        var res = (0, _arrays.arrayMove)('flat', 0, 2)(fields);
        expect(res['flat.0']).toBe(field1);
        expect(res['flat.1']).toBe(field2);
        expect(res['flat.2']).toBe(field0);
        expect(res['flat.3']).toBe(field3);
        expect(res['flat.4']).toBe(field4);
    });
    it('should move a field - end', function () {
        var res = (0, _arrays.arrayMove)('flat', 1, 4)(fields);
        expect(res['flat.0']).toBe(field0);
        expect(res['flat.1']).toBe(field2);
        expect(res['flat.2']).toBe(field3);
        expect(res['flat.3']).toBe(field4);
        expect(res['flat.4']).toBe(field1);
    });
    it('should move a field - less', function () {
        var res = (0, _arrays.arrayMove)('flat', 3, 1)(fields);
        expect(res['flat.0']).toBe(field0);
        expect(res['flat.1']).toBe(field3);
        expect(res['flat.2']).toBe(field1);
        expect(res['flat.3']).toBe(field2);
        expect(res['flat.4']).toBe(field4);
    });
    it('should cleanup fields', function () {
        var res = (0, _arrays.arrayCleanup)('medium')(fields);
        expect(res['flat.0']).toBe(field0);
        expect(res['medium.0.nest.0']).toBeUndefined();
        expect(res['medium.0.nest.1']).toBeUndefined();
        expect(res['medium.0.nest.2']).toBeUndefined();
        expect(res['medium.0.nest.3']).toBeUndefined();
        expect(res['medium.1.nest.0']).toBeUndefined();
        expect(res['medium.1.nest.1']).toBeUndefined();
        expect(res['medium.1.nest.2']).toBeUndefined();
        expect(res['medium.1.nest.3']).toBeUndefined();
        expect(res['rec.0.rec.0.rec.0']).toBe(field0);
    });
});