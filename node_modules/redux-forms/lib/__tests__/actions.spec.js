'use strict';

var _actions = require('../actions');

var actions = _interopRequireWildcard(_actions);

var _containers = require('../containers');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

describe('#actions', function () {
    it('should create an ADD_FORM action', function () {
        expect(actions.addForm('form')).toEqual({
            type: actions.ADD_FORM,
            payload: { name: 'form' }
        });
    });
    it('should create a REMOVE_FORM action', function () {
        expect(actions.removeForm('form')).toEqual({
            type: actions.REMOVE_FORM,
            payload: { name: 'form' }
        });
    });
    it('should create an ADD_FIELD action', function () {
        expect(actions.addField('form', 'field', _containers.field)).toEqual({
            type: actions.ADD_FIELD,
            payload: { form: 'form', id: 'field', field: _containers.field }
        });
    });
    it('should create an TOUCH_ALL action', function () {
        expect(actions.touchAll('form')).toEqual({
            type: actions.TOUCH_ALL,
            payload: { form: 'form' }
        });
    });
    it('should create an SUBMIT_START action', function () {
        expect(actions.submitStart('form')).toEqual({
            type: actions.SUBMIT_START,
            payload: { form: 'form' }
        });
    });
    it('should create an SUBMIT_STOP action', function () {
        expect(actions.submitStop('form')).toEqual({
            type: actions.SUBMIT_STOP,
            payload: { form: 'form' }
        });
    });
    it('should create a REMOVE_FIELD action', function () {
        expect(actions.removeField('form', 'field')).toEqual({
            type: actions.REMOVE_FIELD,
            payload: { form: 'form', id: 'field' }
        });
    });
    it('should create an ADD_ARRAY action', function () {
        expect(actions.addArray('form', 'field')).toEqual({
            type: actions.ADD_ARRAY,
            payload: { form: 'form', id: 'field' }
        });
    });
    it('should create a REMOVE_ARRAY action', function () {
        expect(actions.removeArray('form', 'field')).toEqual({
            type: actions.REMOVE_ARRAY,
            payload: { form: 'form', id: 'field' }
        });
    });
    it('should create an ARRAY_PUSH action', function () {
        expect(actions.arrayPush('form', 'field')).toEqual({
            type: actions.ARRAY_PUSH,
            payload: { form: 'form', id: 'field' }
        });
    });
    it('should create an ARRAY_POP action', function () {
        expect(actions.arrayPop('form', 'field')).toEqual({
            type: actions.ARRAY_POP,
            payload: { form: 'form', id: 'field' }
        });
    });
    it('should create an ARRAY_UNSHIFT action', function () {
        expect(actions.arrayUnshift('form', 'field')).toEqual({
            type: actions.ARRAY_UNSHIFT,
            payload: { form: 'form', id: 'field' }
        });
    });
    it('should create an ARRAY_SHIFT action', function () {
        expect(actions.arrayShift('form', 'field')).toEqual({
            type: actions.ARRAY_SHIFT,
            payload: { form: 'form', id: 'field' }
        });
    });
    it('should create an ARRAY_INSERT action', function () {
        expect(actions.arrayInsert('form', 'field', 1)).toEqual({
            type: actions.ARRAY_INSERT,
            payload: { form: 'form', id: 'field', index: 1 }
        });
    });
    it('should create an ARRAY_REMOVE action', function () {
        expect(actions.arrayRemove('form', 'field', 1)).toEqual({
            type: actions.ARRAY_REMOVE,
            payload: { form: 'form', id: 'field', index: 1 }
        });
    });
    it('should create an ARRAY_SWAP action', function () {
        expect(actions.arraySwap('form', 'arr', 1, 2)).toEqual({
            type: actions.ARRAY_SWAP,
            payload: { form: 'form', id: 'arr', index1: 1, index2: 2 }
        });
    });
    it('should create an ARRAY_MOVE action', function () {
        expect(actions.arrayMove('form', 'arr', 1, 2)).toEqual({
            type: actions.ARRAY_MOVE,
            payload: { form: 'form', id: 'arr', from: 1, to: 2 }
        });
    });
    it('should create a FIELD_CHANGE action', function () {
        expect(actions.fieldChange('form', 'field', 'value', 'error', true)).toEqual({
            type: actions.FIELD_CHANGE,
            payload: { form: 'form', field: 'field', value: 'value', error: 'error', dirty: true }
        });
    });
    it('should create a FIELD_FOCUS action', function () {
        expect(actions.fieldFocus('form', 'field')).toEqual({
            type: actions.FIELD_FOCUS,
            payload: { form: 'form', field: 'field' }
        });
    });
    it('should create a FIELD_BLUR action', function () {
        expect(actions.fieldBlur('form', 'field', 'value', 'error', true)).toEqual({
            type: actions.FIELD_BLUR,
            payload: { form: 'form', field: 'field', value: 'value', error: 'error', dirty: true }
        });
    });
    it('should create a FIELD_VALUE action', function () {
        expect(actions.fieldValue('form', 'field', 'value')).toEqual({
            type: actions.FIELD_VALUE,
            payload: { form: 'form', field: 'field', value: 'value' }
        });
    });
    it('should create a FIELD_ERROR action', function () {
        expect(actions.fieldError('form', 'field', 'error')).toEqual({
            type: actions.FIELD_ERROR,
            payload: { form: 'form', field: 'field', error: 'error' }
        });
    });
    it('should create a FIELD_DIRTY action', function () {
        expect(actions.fieldDirty('form', 'field', true)).toEqual({
            type: actions.FIELD_DIRTY,
            payload: { form: 'form', field: 'field', dirty: true }
        });
    });
});