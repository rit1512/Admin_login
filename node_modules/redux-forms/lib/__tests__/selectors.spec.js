'use strict';

var _selectors = require('../selectors');

var selectors = _interopRequireWildcard(_selectors);

var _containers = require('../containers');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var demoform = Object.assign({}, _containers.form, { fields: {
        'flat': _containers.field,
        'array.0': _containers.field,
        'array.1': _containers.field,
        'deep.0.array.0.name': _containers.field,
        'deep.0.array.1.name': _containers.field
    } });
var demoform2 = Object.assign({}, _containers.form, { fields: {
        'flat': _containers.field,
        'array.0': _containers.field,
        'array.1': _containers.field,
        'deep.0.array.0.name': _containers.field,
        'deep.0.array.1.name': _containers.field
    } });
var errform = Object.assign({}, _containers.form, { fields: {
        'flat': Object.assign({}, _containers.field, { error: 'error' }),
        'array.0': _containers.field
    } });
var touchform = Object.assign({}, _containers.form, { fields: {
        flat: Object.assign({}, _containers.field, { touched: true }),
        flat2: Object.assign({}, _containers.field, { touched: false })
    } });
var dirtyform = Object.assign({}, _containers.form, { fields: {
        flat: Object.assign({}, _containers.field, { dirty: true }),
        flat2: Object.assign({}, _containers.field, { dirty: false })
    } });
var submitform = Object.assign({}, _containers.form, { submitting: true });
var emptystate = {};
var state = {
    reduxForms: { test: demoform }
};
var state2 = {
    reduxForms: { test: demoform2 }
};
var errstate = {
    reduxForms: { test: errform }
};
var touchstate = {
    reduxForms: { test: touchform }
};
var dirtystate = {
    reduxForms: { test: dirtyform }
};
var submitstate = {
    reduxForms: { test: submitform }
};
describe('#selectors', function () {
    it('should return empty if no reducer - value', function () {
        expect(selectors.getValues('nonexistent', emptystate)).toEqual({});
    });
    it('should return empty if no reducer - error', function () {
        expect(selectors.getErrors('nonexistent', emptystate)).toEqual({});
    });
    it('should return the same empty - value', function () {
        var res1 = selectors.getValues('nonexistent', emptystate);
        var res2 = selectors.getValues('nonexistent', emptystate);
        expect(res1).toBe(res2);
    });
    it('should return the same empty - error', function () {
        var res1 = selectors.getErrors('nonexistent', emptystate);
        var res2 = selectors.getErrors('nonexistent', emptystate);
        expect(res1).toBe(res2);
    });
    it('should return empty if no reducer - valid', function () {
        expect(selectors.isValid('nonexistent', emptystate)).toBe(false);
    });
    it('should return empty if no reducer - touched', function () {
        expect(selectors.isTouched('nonexistent', emptystate)).toBe(false);
    });
    it('should return empty if no reducer - dirty', function () {
        expect(selectors.isDirty('nonexistent', emptystate)).toBe(false);
    });
    it('should return empty if no reducer - submitting', function () {
        expect(selectors.isSubmitting('nonexistent', emptystate)).toBe(false);
    });
    it('should return empty if no form - value', function () {
        expect(selectors.getValues('nonexistent', state)).toEqual({});
    });
    it('should return empty if no form - error', function () {
        expect(selectors.getErrors('nonexistent', state)).toEqual({});
    });
    it('should return empty if no form - valid', function () {
        expect(selectors.isValid('nonexistent', state)).toBe(false);
    });
    it('should return empty if no form - touched', function () {
        expect(selectors.isTouched('nonexistent', state)).toBe(false);
    });
    it('should return empty if no form - valid', function () {
        expect(selectors.isDirty('nonexistent', state)).toBe(false);
    });
    it('should return empty if no form - touched', function () {
        expect(selectors.isSubmitting('nonexistent', state)).toBe(false);
    });
    it('should produce an id memoized value form', function () {
        var res = selectors.getValues('test', state);
        var res2 = selectors.getValues('test', state);
        expect(res).toBe(res2);
    });
    it('should produce a value memoized form', function () {
        var res = selectors.getValues('test', state);
        var res2 = selectors.getValues('test', state2);
        expect(res).toBe(res2);
    });
    it('should produce an id memoized error form', function () {
        var res = selectors.getErrors('test', state);
        var res2 = selectors.getErrors('test', state);
        expect(res).toBe(res2);
    });
    it('should produce an error memoized form', function () {
        var res = selectors.getErrors('test', state);
        var res2 = selectors.getErrors('test', state2);
        expect(res).toBe(res2);
    });
    it('should produce nested values', function () {
        var res = selectors.getValues('test', state);
        expect(res).toEqual({
            flat: '',
            array: ['', ''],
            deep: [{
                array: [{ name: '' }, { name: '' }]
            }]
        });
    });
    it('should produce nested errors', function () {
        var res = selectors.getErrors('test', state);
        expect(res).toEqual({
            flat: null,
            array: [null, null],
            deep: [{
                array: [{ name: null }, { name: null }]
            }]
        });
    });
    it('should reduce valid - true', function () {
        var res = selectors.isValid('test', state);
        expect(res).toBe(true);
    });
    it('should reduce valid - false', function () {
        var res = selectors.isValid('test', errstate);
        expect(res).toBe(false);
    });
    it('should reduce touched - false', function () {
        var res = selectors.isTouched('test', state);
        expect(res).toBe(false);
    });
    it('should reduce touched - true', function () {
        var res = selectors.isTouched('test', touchstate);
        expect(res).toBe(true);
    });
    it('should reduce dirty - false', function () {
        var res = selectors.isDirty('test', state);
        expect(res).toBe(false);
    });
    it('should reduce dirty - true', function () {
        var res = selectors.isDirty('test', dirtystate);
        expect(res).toBe(true);
    });
    it('should determine submitting - false', function () {
        var res = selectors.isSubmitting('test', state);
        expect(res).toBe(false);
    });
    it('should determine submitting - true', function () {
        var res = selectors.isSubmitting('test', submitstate);
        expect(res).toBe(true);
    });
});