'use strict';

var _reducer = require('../reducer');

var _reducer2 = _interopRequireDefault(_reducer);

var _actions = require('../actions');

var actions = _interopRequireWildcard(_actions);

var _containers = require('../containers');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('#formsReducer', function () {
    it('should return initial state', function () {
        var state = (0, _reducer2.default)(undefined, {});
        expect(state).toEqual({});
    });
    it('should add a form', function () {
        var state = (0, _reducer2.default)({}, actions.addForm('form'));
        expect(state).toEqual({ form: _containers.form });
    });
    it('should remove a form', function () {
        var state = (0, _reducer2.default)({ form: _containers.form }, actions.removeForm('form'));
        expect(state).toEqual({});
    });
    it('should add a field', function () {
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { fields: {} })
        }, actions.addField('form', 'field', _containers.field));
        expect(state.form.fields.field).toEqual(_containers.field);
    });
    it('should not add a field without form', function () {
        var state = (0, _reducer2.default)({}, actions.addField('form', 'field', _containers.field));
        expect(state.form).toBeUndefined();
    });
    it('should remove a field', function () {
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { fields: { field: _containers.field } })
        }, actions.removeField('form', 'field'));
        expect(state.form.fields).toEqual({});
    });
    it('should touch all fields', function () {
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { fields: { field1: _containers.field, field2: _containers.field } })
        }, actions.touchAll('form'));
        expect(state.form.fields.field1.touched).toBe(true);
        expect(state.form.fields.field2.touched).toBe(true);
    });
    it('should not touch all fields without form', function () {
        var state = (0, _reducer2.default)({}, actions.touchAll('form'));
        expect(state).toEqual({});
    });
    it('should start submit', function () {
        var state = (0, _reducer2.default)({ form: _containers.form }, actions.submitStart('form'));
        expect(state.form.submitting).toBe(true);
    });
    it('should not start submit without form', function () {
        var state = (0, _reducer2.default)({}, actions.submitStart('form'));
        expect(state.form).toBeUndefined();
    });
    it('should stop submit', function () {
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { submitting: true })
        }, actions.submitStop('form'));
        expect(state.form.submitting).toBe(false);
    });
    it('should not stop submit without form', function () {
        var state = (0, _reducer2.default)({}, actions.submitStop('form'));
        expect(state.form).toBeUndefined();
    });
    it('should add an array', function () {
        var state = (0, _reducer2.default)({
            form: _containers.form
        }, actions.addArray('form', 'array'));
        expect(state.form.arrays.array).toBe(0);
    });
    it('should not add an array without form', function () {
        var state = (0, _reducer2.default)({}, actions.addArray('form', 'array'));
        expect(state.form).toBeUndefined();
    });
    it('should remove an array', function () {
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { fields: { 'array.0': _containers.field }, arrays: { array: 1 } })
        }, actions.removeArray('form', 'array'));
        expect(state.form).toEqual(_containers.form);
    });
    it('should push to an array', function () {
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { arrays: { array: 1 } })
        }, actions.arrayPush('form', 'array'));
        expect(state.form.arrays.array).toBe(2);
    });
    it('should not push to an array without form', function () {
        var state = (0, _reducer2.default)({}, actions.arrayPush('form', 'array'));
        expect(state.form).toBeUndefined();
    });
    it('should pop from an array', function () {
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { arrays: { array: 2 } })
        }, actions.arrayPop('form', 'array'));
        expect(state.form.arrays.array).toBe(1);
    });
    it('should not pop from an array without form', function () {
        var state = (0, _reducer2.default)({}, actions.arrayPop('form', 'array'));
        expect(state.form).toBeUndefined();
    });
    it('should unshift an array', function () {
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { fields: { 'array.0': _containers.field }, arrays: { array: 1 } })
        }, actions.arrayUnshift('form', 'array'));
        expect(state.form.fields['array.0']).toBeUndefined();
        expect(state.form.fields['array.1']).toBeDefined();
        expect(state.form.arrays.array).toBe(2);
    });
    it('should not unshift an array without form', function () {
        var state = (0, _reducer2.default)({}, actions.arrayUnshift('form', 'array'));
        expect(state.form).toBeUndefined();
    });
    it('should shift an array', function () {
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { fields: { 'array.0': _containers.field, 'array.1': _containers.field }, arrays: { array: 2 } })
        }, actions.arrayShift('form', 'array'));
        expect(state.form.fields['array.0']).toBeDefined();
        expect(state.form.fields['array.1']).toBeUndefined();
        expect(state.form.arrays.array).toBe(1);
    });
    it('should not shift an array without form', function () {
        var state = (0, _reducer2.default)({}, actions.arrayShift('form', 'array'));
        expect(state.form).toBeUndefined();
    });
    it('should insert to an array', function () {
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { fields: { 'array.0': _containers.field, 'array.1': _containers.field }, arrays: { array: 2 } })
        }, actions.arrayInsert('form', 'array', 0));
        expect(state.form.fields['array.0']).toBeDefined();
        expect(state.form.fields['array.1']).toBeUndefined();
        expect(state.form.fields['array.2']).toBeDefined();
        expect(state.form.arrays.array).toBe(3);
    });
    it('should not insert to an array without form', function () {
        var state = (0, _reducer2.default)({}, actions.arrayInsert('form', 'array', 0));
        expect(state.form).toBeUndefined();
    });
    it('should remove from an array', function () {
        var field0 = Object.assign({}, _containers.field, { value: '0' });
        var field2 = Object.assign({}, _containers.field, { value: '2' });
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { fields: { 'array.0': field0, 'array.1': _containers.field, 'array.2': field2 }, arrays: { array: 3 } })
        }, actions.arrayRemove('form', 'array', 1));
        expect(state.form.fields['array.0']).toBe(field0);
        expect(state.form.fields['array.1']).toBe(field2);
        expect(state.form.fields['array.2']).toBeUndefined();
        expect(state.form.arrays.array).toBe(2);
    });
    it('should not remove from an array without form', function () {
        var state = (0, _reducer2.default)({}, actions.arrayRemove('form', 'array', 1));
        expect(state.form).toBeUndefined();
    });
    it('should swap fields in an array', function () {
        var field0 = Object.assign({}, _containers.field, { value: '0' });
        var field1 = Object.assign({}, _containers.field, { value: '1' });
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { fields: { 'array.0': field0, 'array.1': field1 }, arrays: { array: 2 } })
        }, actions.arraySwap('form', 'array', 0, 1));
        expect(state.form.fields['array.0']).toBe(field1);
        expect(state.form.fields['array.1']).toBe(field0);
    });
    it('should not swap fields in an array without form', function () {
        var state = (0, _reducer2.default)({}, actions.arraySwap('form', 'array', 0, 1));
        expect(state.form).toBeUndefined();
    });
    it('should move a field in an array', function () {
        var field0 = Object.assign({}, _containers.field, { value: '0' });
        var field1 = Object.assign({}, _containers.field, { value: '1' });
        var field2 = Object.assign({}, _containers.field, { value: '2' });
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { fields: { 'array.0': field0, 'array.1': field1, 'array.2': field2 }, arrays: { array: 2 } })
        }, actions.arrayMove('form', 'array', 0, 2));
        expect(state.form.fields['array.0']).toBe(field1);
        expect(state.form.fields['array.1']).toBe(field2);
        expect(state.form.fields['array.2']).toBe(field0);
    });
    it('should not move a field in an array without form', function () {
        var state = (0, _reducer2.default)({}, actions.arrayMove('form', 'array', 0, 2));
        expect(state.form).toBeUndefined();
    });
    it('should change a field', function () {
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { fields: { field: _containers.field } })
        }, actions.fieldChange('form', 'field', 'doge', 'error', true));
        expect(state.form.fields.field).toEqual({
            value: 'doge',
            error: 'error',
            dirty: true,
            touched: false,
            visited: false,
            active: false
        });
    });
    it('should not change a field without form', function () {
        var state = (0, _reducer2.default)({}, actions.fieldChange('form', 'field', 'doge', 'error', true));
        expect(state.form).toBeUndefined();
    });
    it('should not change unwanted props', function () {
        var newField = Object.assign({}, _containers.field, { touched: true, visited: true, active: true });
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { fields: { field: newField } })
        }, actions.fieldChange('form', 'field', 'doge', 'error', true));
        expect(state.form.fields.field.touched).toBe(true);
        expect(state.form.fields.field.visited).toBe(true);
        expect(state.form.fields.field.active).toBe(true);
    });
    it('should focus a field', function () {
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { fields: { field: _containers.field } })
        }, actions.fieldFocus('form', 'field'));
        expect(state.form.fields.field).toEqual({
            value: '',
            error: null,
            dirty: false,
            touched: false,
            visited: true,
            active: true
        });
    });
    it('should not focus a field without form', function () {
        var state = (0, _reducer2.default)({}, actions.fieldFocus('form', 'field'));
        expect(state.form).toBeUndefined();
    });
    it('should not focus unwanted props', function () {
        var newField = Object.assign({}, _containers.field, { value: 'doge', error: 'error', dirty: true, touched: true });
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { fields: { field: newField } })
        }, actions.fieldFocus('form', 'field'));
        expect(state.form.fields.field.value).toBe('doge');
        expect(state.form.fields.field.error).toBe('error');
        expect(state.form.fields.field.dirty).toBe(true);
        expect(state.form.fields.field.touched).toBe(true);
    });
    it('should blur a field', function () {
        var newField = Object.assign({}, _containers.field, { active: true });
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { fields: { field: newField } })
        }, actions.fieldBlur('form', 'field', 'value', 'error', true));
        expect(state.form.fields.field).toEqual({
            value: 'value',
            error: 'error',
            dirty: true,
            touched: true,
            visited: false,
            active: false
        });
    });
    it('should not blur a field without form', function () {
        var state = (0, _reducer2.default)({}, actions.fieldBlur('form', 'field', 'value', 'error', true));
        expect(state.form).toBeUndefined();
    });
    it('should not blur unwanted props', function () {
        var newField = Object.assign({}, _containers.field, { visited: true });
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { fields: { field: newField } })
        }, actions.fieldBlur('form', 'field', 'value', 'error', true));
        expect(state.form.fields.field.visited).toBe(true);
    });
    it('should change field value', function () {
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { fields: { field: _containers.field } })
        }, actions.fieldValue('form', 'field', 'value'));
        expect(state.form.fields.field.value).toBe('value');
    });
    it('should not change field value without form', function () {
        var state = (0, _reducer2.default)({}, actions.fieldValue('form', 'field', 'value'));
        expect(state.form).toBeUndefined();
    });
    it('should change field error', function () {
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { fields: { field: _containers.field } })
        }, actions.fieldError('form', 'field', 'error'));
        expect(state.form.fields.field.error).toBe('error');
    });
    it('should not change field error without form', function () {
        var state = (0, _reducer2.default)({}, actions.fieldError('form', 'field', 'error'));
        expect(state.form).toBeUndefined();
    });
    it('should change field dirty', function () {
        var state = (0, _reducer2.default)({
            form: Object.assign({}, _containers.form, { fields: { field: _containers.field } })
        }, actions.fieldDirty('form', 'field', true));
        expect(state.form.fields.field.dirty).toBe(true);
    });
    it('should not change field dirty without form', function () {
        var state = (0, _reducer2.default)({}, actions.fieldDirty('form', 'field', true));
        expect(state.form).toBeUndefined();
    });
});