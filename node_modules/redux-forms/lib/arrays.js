'use strict';

exports.__esModule = true;

var _startsWith = require('ramda/src/startsWith');

var _startsWith2 = _interopRequireDefault(_startsWith);

var _not = require('ramda/src/not');

var _not2 = _interopRequireDefault(_not);

var _pickBy = require('ramda/src/pickBy');

var _pickBy2 = _interopRequireDefault(_pickBy);

var _map = require('ramda/src/map');

var _map2 = _interopRequireDefault(_map);

var _any = require('ramda/src/any');

var _any2 = _interopRequireDefault(_any);

var _keys = require('ramda/src/keys');

var _keys2 = _interopRequireDefault(_keys);

var _prepend = require('ramda/src/prepend');

var _prepend2 = _interopRequireDefault(_prepend);

var _head = require('ramda/src/head');

var _head2 = _interopRequireDefault(_head);

var _prop = require('ramda/src/prop');

var _prop2 = _interopRequireDefault(_prop);

var _assoc = require('ramda/src/assoc');

var _assoc2 = _interopRequireDefault(_assoc);

var _reduce = require('ramda/src/reduce');

var _reduce2 = _interopRequireDefault(_reduce);

var _replace = require('ramda/src/replace');

var _replace2 = _interopRequireDefault(_replace);

var _split = require('ramda/src/split');

var _split2 = _interopRequireDefault(_split);

var _tail = require('ramda/src/tail');

var _tail2 = _interopRequireDefault(_tail);

var _compose = require('ramda/src/compose');

var _compose2 = _interopRequireDefault(_compose);

exports.arrayUnshift = arrayUnshift;
exports.arrayShift = arrayShift;
exports.arraySwap = arraySwap;
exports.arrayMove = arrayMove;
exports.arrayCleanup = arrayCleanup;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function arrayUnshift(path, start) {
    var toParts = (0, _compose2.default)(_tail2.default, (0, _split2.default)('.'), (0, _replace2.default)(path, ''));
    return function (fields) {
        return (0, _reduce2.default)(function (acc, key) {
            if (key.indexOf(path) !== 0) {
                return (0, _assoc2.default)(key, (0, _prop2.default)(key, fields), acc);
            }
            var parts = toParts(key);
            var index = Number((0, _head2.default)(parts));
            if (isNaN(index) || index < start) {
                return (0, _assoc2.default)(key, (0, _prop2.default)(key, fields), acc);
            }
            var lead = path + '.' + (index + 1);
            var newkey = (0, _prepend2.default)(lead, (0, _tail2.default)(parts)).join('.');
            return (0, _assoc2.default)(newkey, (0, _prop2.default)(key, fields), acc);
        }, {}, (0, _keys2.default)(fields));
    };
}
function arrayShift(path, start) {
    var toParts = (0, _compose2.default)(_tail2.default, (0, _split2.default)('.'), (0, _replace2.default)(path, ''));
    return function (fields) {
        return (0, _reduce2.default)(function (acc, key) {
            if (key.indexOf(path) !== 0) {
                return (0, _assoc2.default)(key, (0, _prop2.default)(key, fields), acc);
            }
            var parts = toParts(key);
            var index = Number((0, _head2.default)(parts));
            if (isNaN(index) || index < start) {
                return (0, _assoc2.default)(key, (0, _prop2.default)(key, fields), acc);
            }
            var newindex = index - 1;
            if (newindex < 0 || index === start) {
                return acc;
            }
            var lead = path + '.' + newindex;
            var newkey = (0, _prepend2.default)(lead, (0, _tail2.default)(parts)).join('.');
            return (0, _assoc2.default)(newkey, (0, _prop2.default)(key, fields), acc);
        }, {}, (0, _keys2.default)(fields));
    };
}
function hasPaths(pos1, pos2, fields) {
    var keyz = (0, _keys2.default)(fields);
    var ok1 = (0, _compose2.default)((0, _any2.default)(Boolean), (0, _map2.default)(function (key) {
        return key.indexOf(pos1) === 0;
    }))(keyz);
    var ok2 = (0, _compose2.default)((0, _any2.default)(Boolean), (0, _map2.default)(function (key) {
        return key.indexOf(pos2) === 0;
    }))(keyz);
    return ok1 && ok2;
}
function arraySwap(path, index1, index2) {
    return function (fields) {
        var pos1 = path + '.' + index1;
        var pos2 = path + '.' + index2;
        if (!hasPaths(pos1, pos2, fields)) {
            return fields;
        }
        return (0, _reduce2.default)(function (acc, key) {
            if (key.indexOf(pos1) === 0) {
                return (0, _assoc2.default)((0, _replace2.default)(pos1, pos2, key), (0, _prop2.default)(key, fields), acc);
            }
            if (key.indexOf(pos2) === 0) {
                return (0, _assoc2.default)((0, _replace2.default)(pos2, pos1, key), (0, _prop2.default)(key, fields), acc);
            }
            return (0, _assoc2.default)(key, (0, _prop2.default)(key, fields), acc);
        }, {}, (0, _keys2.default)(fields));
    };
}
function arrayMove(path, index1, index2) {
    return function (fields) {
        var pos1 = path + '.' + index1;
        var pos2 = path + '.' + index2;
        if (!hasPaths(pos1, pos2, fields)) {
            return fields;
        }
        return (0, _compose2.default)((0, _assoc2.default)(pos2, (0, _prop2.default)(pos1, fields)), arrayUnshift(path, index2), arrayShift(path, index1))(fields);
    };
}
function arrayCleanup(path) {
    return (0, _pickBy2.default)((0, _compose2.default)(_not2.default, function (_, key) {
        return (0, _startsWith2.default)(path, key);
    }));
}